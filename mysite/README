#Criando ambiente VirtualEnv
python3 -m venv myvenv
source myvenv/bin/activate
pip install django==1.8.5
pip install djangorestframework

#Criar projeto Django
django-admin startproject mysite .
cd mysite

#Roda migrations
python manage.py migrate

#Rodar servidor
python manage.py runserver

#Criar uma nova aplicação no projeto Django
python manage.py startapp blog

#Criando as migratins para os models de blog 
python manage.py makemigrations blog

#Aplicando as migrations
python manage.py migrate blog

#Criando super usuário para entrar como Admin
python manage.py createsuperuser

#Configurando GIT
$ git init
Initialized empty Git repository in ~/djangogirls/.git/
$ git config user.name "Your Name"
$ git config user.email you@example.com

#Colando o git hub como repositório remoto de origem
$ git remote add origin https://github.com/<your-github-username>/my-first-blog.git
$ git push -u origin master

#No console do servidor remoto
    #Virtual Env
    #Antes clone repositório github
    cd my-first-blog
    virtualenv --python=python3.4 myvenv
    source myvenv/bin/activate
    
    #Whitenoite 
    pip install django whitenoise #Gerenciar arquivos estáticos
    python manage.py collectstatic

    #Banco
    python manage.py migrate
    python manage.py createsuperuser
    
    #Adicionar uma nova web aplication
    #Aponto a pasta do virtial env
    #Edita o aquivo andrebessa_pythonanywhere_com_wsgi.py 
    import os
    import sys

    path = '/home/<your-username>/my-first-blog'  # use your own username here
    if path not in sys.path:
        sys.path.append(path)

    os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'

    from django.core.wsgi import get_wsgi_application
    from whitenoise.django import DjangoWhiteNoise
    application = DjangoWhiteNoise(get_wsgi_application())

#Voltando para o PC

# Ajustando URLs
# Adicionar em mysite/urls.py
    url(r'', include('blog.urls')),

# Criando o arquivo blog/urls.py e adicinando
    from django.conf.urls import include, url
    from . import views

    urlpatterns = [
        url(r'^$', views.post_list),
    ]

# Adicionar ao aquivo blog/views.py

    def post_list(request):
        return render(request, 'blog/post_list.html', {})

#Crinado templates
#Criando em blog as pastas templates/blog  
#Dentro de blog/template/blog criar o arquivo post_list.html

#ORM do Django
    python manage.py shell

    #Para acessar todos os Registros de Post
    from blog.models import Post
    Post.objects.all()

    #Para inserir um novo registro em Post será necessário passar uma referência de usuários 
    from django.contrib.auth.models import User
    me = User.objects.get(username='andrebessa')
    Post.objects.create(author=me, title='Sample title', text='Test')

    #Filtrar um registro de Post por parâmetro
    Post.objects.filter(author=me)

    #Filtar por texto que contém uma determinada sub String "<parametro__contains>"
    Post.objects.filter(title__contains='title')

    #Filtrar por data
    from django.utils import timezone
    Post.objects.filter(published_date__lte=timezone.now()) []

    #Invovando método de um objeto criado
    post = Post.objects.get(id=1)
    post.publish()

    #Odenando saída
    Post.objects.order_by('created_date')
    Post.objects.order_by('-created_date')

    #Sair
    exit()

#Queryset e carga dinâmica de informações

#Django Rest Framework
    
    #Criando Serializers em blog/serializers.py
    from django.contrib.auth.models import User, Group
    from rest_framework import serializers


    class UserSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = User
            fields = ('url', 'username', 'email', 'groups')


    class GroupSerializer(serializers.HyperlinkedModelSerializer):
        class Meta:
            model = Group
            fields = ('url', 'name')

    #Adicionar a blog/views.py
    from django.contrib.auth.models import User, Group
    from rest_framework import viewsets
    from tutorial.quickstart.serializers import UserSerializer, GroupSerializer


    class UserViewSet(viewsets.ModelViewSet):
        """
        API endpoint that allows users to be viewed or edited.
        """
        queryset = User.objects.all().order_by('-date_joined')
        serializer_class = UserSerializer


    class GroupViewSet(viewsets.ModelViewSet):
        """
        API endpoint that allows groups to be viewed or edited.
        """
        queryset = Group.objects.all()
        serializer_class = GroupSerializer
        
    #Adcionar em setting.py, 
    INSTALLED_APPS = (
        ...
        'rest_framework',
    )

    REST_FRAMEWORK = {
        'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAdminUser',),
        'PAGE_SIZE': 10
    }

    #Adicionar em urls.py
    from rest_framework import routers
    from blog import views

    router = routers.DefaultRouter()
    router.register(r'users', views.UserViewSet)
    router.register(r'groups', views.GroupViewSet)

    urlpatterns = [
        ...
        url(r'^', include(router.urls)),
        url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
    ]

